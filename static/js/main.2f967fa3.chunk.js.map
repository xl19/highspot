{"version":3,"sources":["components/Card/card.jsx","components/CardList/card-list.jsx","components/Loader/loader.jsx","components/InfiniteScroll/infinite-scroll.jsx","constants.js","components/SearchBox/search-box.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","card","imageUrl","CardList","data","map","key","name","LoadingIndicator","type","color","height","width","InfiniteScroll","loadData","state","totalCount","length","fetch","url","page","then","response","json","setState","isLoaded","dataProperty","scrolling","_totalCount","pageSize","_pageSize","error","loadMoreData","prevState","handleScroll","lastElement","document","querySelector","lastElementOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","currentCount","itemsPerTime","searchTerm","this","scrollListener","addEventListener","removeEventListener","slicedData","filter","element","toLowerCase","includes","slice","component","React","Component","cardsApiUrl","SearchBox","placeholder","handleChange","onChange","App","e","target","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2f967fa3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.scss';\r\n\r\nexport const Card = props => (\r\n    <div className='item-container'>\r\n        <img alt=\"card\" src={props.card.imageUrl} />\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.scss';\r\nimport { Card } from '../Card/card';\r\n\r\n// Iterate over the input data set to show a grid of cards\r\nexport const CardList = props => (\r\n    <div className='item-list'>\r\n        {\r\n            props.data.map(card => (\r\n                <Card key={card.name} card={card}></Card>\r\n            ))\r\n        }\r\n    </div>\r\n);","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport const LoadingIndicator = props => {  \r\n    return <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n};","import React from \"react\";\r\nimport { LoadingIndicator } from '../Loader/loader';\r\n\r\n/* This component implements an \"infinite scrolling\" mechanism and is completely data agnostic.\r\n * It can be re-used and fed with any data set where the state shape has a compatible structure.\r\n*/\r\nexport class InfiniteScroll extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.itemsPerTime = 20;\r\n\r\n        this.state = {\r\n            data: [],\r\n            page: 1,\r\n            currentCount: this.itemsPerTime,\r\n            totalCount: 0,\r\n            pageSize: 0,\r\n            searchTerm: '',\r\n            isLoaded: false,\r\n            error: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollListener = window.addEventListener('scroll', this.handleScroll);\r\n        this.loadData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    loadData = () => {\r\n        const { data, totalCount } = this.state;\r\n\r\n        // We only fetch more data if the current data set length is smaller than the total count\r\n        if (totalCount === 0 || data.length < totalCount) {\r\n            fetch(this.props.url(this.state.page))\r\n            .then(response => response.json())\r\n                .then(\r\n                    (json) => {\r\n                        // Append additional data to the current state with the spread operator.\r\n                        // We dynamically pass the name of the property containing the actual data as a prop,\r\n                        // which keeps the component data agnostic.\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            data: [...data, ...json[this.props.dataProperty]],\r\n                            scrolling: false,\r\n                            totalCount: json._totalCount,\r\n                            pageSize: json._pageSize\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        this.setState({\r\n                            isLoaded: false,\r\n                            error\r\n                        });\r\n                    }\r\n            );\r\n        }\r\n    };\r\n\r\n    // Let's go to the next page.\r\n    loadMoreData = () => {\r\n        this.setState(\r\n            prevState => ({\r\n                page: prevState.page + 1,\r\n                scrolling: true\r\n            }),\r\n\r\n            this.loadData\r\n        );\r\n    };\r\n\r\n    // We dynamically calculate the offset of the last element in the list, to detect the end of the page\r\n    handleScroll = () => { \r\n        const lastElement = document.querySelector(\".item-list > div.item-container:last-child\");\r\n        const lastElementOffset = lastElement.offsetTop + lastElement.clientHeight;\r\n        const pageOffset = window.pageYOffset + window.innerHeight;\r\n        const spaceBuffer = 100;\r\n        \r\n        /* If we reached the end of the page, check the current count and load more data from the API. \r\n         * 100 pixels have been hard-coded and represent an extra space buffer to detect\r\n         * when the user reaches the end of the page while scrolling down.\r\n         */ \r\n        if (pageOffset > lastElementOffset - spaceBuffer) {\r\n            // If the current count is multiple than the page size, it's time to make another API call\r\n            if (this.state.currentCount % this.state.pageSize === 0) {\r\n                this.loadMoreData();\r\n            }\r\n\r\n            // Update the current count to reflect how many items we are showing in the UI\r\n            this.setState({\r\n                currentCount: this.state.currentCount + this.itemsPerTime\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // Filter the current data set by the current search term typed by the user\r\n        const filteredData = this.state.data.filter(\r\n            element => element.name.toLowerCase().includes(this.props.searchTerm.toLowerCase())\r\n        );\r\n\r\n        // Only show a predefined number of items per each request - starting with 20 in our case.\r\n        const slicedData = filteredData.slice(0, this.state.currentCount);\r\n\r\n        return this.state.isLoaded ? <this.props.component data={slicedData} /> : <LoadingIndicator />;\r\n    }\r\n};","export const cardsApiUrl = (page) => `https://api.elderscrollslegends.io/v1/cards?page=${page}`;","import React from 'react';\r\nimport './search-box.scss';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n);","import React from 'react';\nimport './App.scss';\nimport { CardList } from './components/CardList/card-list';\nimport { InfiniteScroll } from './components/InfiniteScroll/infinite-scroll';\nimport { cardsApiUrl } from './constants';\nimport { SearchBox } from './components/SearchBox/search-box';\n\n// This is the main React component used to launch the application\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchTerm: ''\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <SearchBox \n          placeholder=\"Search cards\" \n          handleChange={e => this.setState({\n            searchTerm: e.target.value\n          })} />\n\n        <InfiniteScroll \n          component={CardList} \n          url={cardsApiUrl} \n          dataProperty={'cards'} \n          searchTerm={this.state.searchTerm} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}